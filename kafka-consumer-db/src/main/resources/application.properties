server.port=8081
topic.name=GeoJson8

#topic.name=${KAFKA_CREATE_TOPICS}

#spring.kafka.consumer.bootstrap-servers= localhost:9092

spring.kafka.consumer.bootstrap-servers= ${BOOTSTRAP_HOST}:${BOOTSTRAP_PORT}

spring.kafka.consumer.group-id= myConsumerGroup
spring.kafka.consumer.auto-offset-reset= earliest
spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
#spirng.kafka.consumer.value-deserializer= org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer= org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

#spring.datasource.url=jdbc:postgresql://postgis:5432/spring_kafka_db
spring.datasource.username=admin
spring.datasource.password=nimda

spring.datasource.url=${SPRING_DATASOURCE_URL}
#spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
#spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}


spring.jpa.properties.hibernate.dialect=org.hibernate.spatial.dialect.postgis.PostgisDialect
spring.jpa.hibernate.ddl-auto=update

#spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO}

spring.jpa.hibernate.show-sql=true
spring.jpa.hibernate.use_sql_comments=true
spring.jpa.hibernate.format_sql=true

spring.graphql.graphiql.enabled=true
spring.graphql.cors.enabled = true
